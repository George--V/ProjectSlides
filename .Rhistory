power.t.test(n = 100, delta=0.01 , sd=.04 , type = “one.sample”)
power.t.test(n = 100, delta=0.01 , sd=.04 , type = “one.sample”, alt= “one.sided”)
power.t.test(power=.90, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.90, delta=0.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.05, delta=0.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(n=100, delta=0.01, sd=.04, type="one.sample", alt="one.sided")$power
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
w <- c(2, 1, 3, 1)
mean(w*x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
lm(x,y)
abline(x,y)
z<-abline(x,y)
z
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(galton)
install.packages("UsingR")
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(galton)
library(usingR)
library(UsingR)
data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
galton
head(galton,10)
plot(galton$parent,galton$child,pch=19,col="blue")
```{r freqGalton, dependson="galton",fig.height=6,fig.width=6,echo=FALSE}
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
table(galton$child, galton$parent)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
## The solution
### In the next few lectures we'll talk about why this is the solution
```{r}
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
```
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x -1)
lm(x~y -1)
data(mtcars)
lm(mtcars$mpg ~ mtcars$weight)
lm(mtcars$mpg ~ mtcars$weight)
mtcars
lm(mtcars$mpg ~ mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt -1
)
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
data(galton)
library(UsingR)
data(galton)
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
cor.test(child~parent)
cor.test(~child + parent)
cor.test(~child + parent, data=galton)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
summary(x)
Try the following.
fun <- function(x){
a <- min(x)
b <- max(x)
(x - a)/(b - a)
}
mat <- matrix(rnorm(12), ncol=3)
apply(mat, 2, fun)
x
scale(x0)
scale(x)
mean(x)
sd(x)
sd(scale(x)
)
mean(scale(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x<-c(1,2,3,-1,-2,-3)
mean(x)
y<-x*2
y
mean(y)
plot(x,y)
lm(y ~ x)
lm(y ~ x -1)
lm(y ~ x, -1)
plot(x,y)
abline
abline()
abline(x,y)
plot(x,y)
abline(x,y)
x<-c(1,2,3)
x<-c(1,2,3,4,5)
mean(x)
x
x<-c(-1,-2,1,2)
y<-(x*3)
plot(x,y)
lm(y ~ x)
y<-(x+5)
lm(y ~ x)
mean(y)
y<-c(-11,8,-8,11)
lm(y ~ x)
plot(x,y)
abline(x.y)
abline(x,y)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
xw<-x*w
xw
sum(xw)
sum(xw)/sum(w)
install.packages("shiny")
library(shiny)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
d
library(rCharts)
install.packages(rChart)
install.packages(rCharts)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
modelFit <-train(mixtures$CompressiveStrength ~ ., data=training)
modelFit <-train(mixtures$CompressiveStrength ~ [.], data=training)
modelFit <-train(mixtures$CompressiveStrength ~ indx(.), data=training)
modelFit <-train(mixtures$CompressiveStrength, data=training)
plot(mixtures$CompressiveStrength, data=training)
plot(mixtures$CompressiveStrength)
training
names(training)
plot(training$CompressiveStrength)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
plot(training$CompressiveStrength, col = categorical )
plot(training$CompressiveStrength, col = categorial )
plot(training$CompressiveStrength, col = "categorical" )
plot(training$CompressiveStrength, col = "categorical" )
plot(training$CompressiveStrength)
plot(training$CompressiveStrength~traning$Age)
plot(training$CompressiveStrength,traning$Age)
plot(training$CompressiveStrength~training$Age)
plot(training$CompressiveStrength~training$FlyAsh)
plot(training$CompressiveStrength~training$FlyAsh[indx])
library(devtools)
install.packages(devtools)
install.packages('devtools')
library(devtools)
devtools::install_github('rstudio/shinyapps')
install.packages('shiny')
library(shinyapps)
shinyapps::setAccountInfo(name='george--v', token='1F189E90B9E96E49E5D4EEA5BC54EE6D', secret='4SJ3Fy/1Dd8GS/NEMOIDC8pnDcPXYCylTyVpzllm')
deployApp()
library(ShinyApps)
library(shinyapps)
deployApp()
data mtcars
data(mtcars)
anova(mpg~wt)
x<-lm(mpg~wt)
x<-lm(mtcars$mpg~mtcars$wt)
anova(x)
fit <- lm(mpg ~ wt, data = mtcars)
newdata <- data.frame(wt=3.00)
predict(fit, newdata, interval = ("predict"))
mtcars?
help mtcars
help(mtcars)
x<-lm(mtcars$mpg~mtcars$wt)
summary(x)
x$coef
x$fitted
summary(x$fitted)
anova(x)
anova(x$fitted)
x$predicte
x$predict
x$predicted
model<-lm(mpg~wt)
model<-lm(mtcars$mpg~mtcars$wt)
anova(model)
summary(model)
anova(model)
model$predicted
sqrt(848)
sqrt(848)/sqrt(278)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(caret)
preProcess(intrain)
preProcess(inTrain)
preProcess(training)
preProcess(test)
preProcess(testing)
preProcess(testing,0.80)
---
library(caret)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[c(1,58:69)]
testing <-testing[c(1,58:69)]
g1 <- train(training$diagnosis~., data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(g1, testing))
library(e1071)
install.pakages("e1071")
install.packages("e1071")
library(e1071)
g1 <- train(training$diagnosis~., data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(g1, testing))
preProc <- preProcess(training[,-1], method="pca", thresh=0.8)
trainPC<-predict(preProc, training[,-1])
testPC<-predict(preProc, testing[,-1])
g2 <- train(training$diagnosis~., data=trainPC, method="glm")
confusionMatrix(testing$diagnosis, predict(g2, testPC))
preProc <- preProcess(training[,c(58:69)], method="pca", thresh=0.9)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(training[,c(58:69)], method="pca", thresh=0.9)
preProc
preProc <- preProcess(training[,c(58:69)], method="pca", thresh=0.8)
preProc
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
training$SuperPlasticizer
names(training)
training$Superplasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
log(training$Superplasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$compressiveStrength)
training
rownumber(training$compressiveStrength)
row(training$compressiveStrength)
training
names(training)
row(training$Cement)
plot(training$compressiveStrength,1:nrow(training$FlyAsh))
plot(training$compressiveStrength,as.numeric(rownames(training$FlyAsh))
)
plot(training$compressiveStrength,training$FlyAsh)
nrow(training$FlyAsh)
training$FlyAsh
plot(training$compressiveStrength,row(training$FlyAsh))
nrow(training$FlyAsh)
nrows(training$FlyAsh)
training$FlyAsh
which(training$FlyAsh)
as.matrix(training$FlyAsh)
row(as.matrix(training$FlyAsh))
plot(training$compressiveStrength,row(as.matrix(training$FlyAsh))
)
training$compressiveStrength
testing$compressiveStrength
mixtures$compressiveStrength
plot(training$CompressiveStrength,row(as.matrix(training$FlyAsh))
)
plot(training$CompressiveStrength,cut2(row(as.matrix(training$FlyAsh))),4)
library(Hmisc)
plot(training$CompressiveStrength,cut2(row(as.matrix(training$FlyAsh))),4)
cut2(row(as.matrix(training$FlyAsh))),4
cut2(row(as.matrix(training$FlyAsh))),4)
cut2(row(as.matrix(training$FlyAsh)),4)
factors(cut2(row(as.matrix(training$FlyAsh)),4))
factor(cut2(row(as.matrix(training$FlyAsh)),4))
levels(cut2(row(as.matrix(training$FlyAsh)),4))
cut2(row(as.matrix(training$FlyAsh)),onlycuts)
cut2(row(as.matrix(training$FlyAsh)),onlycuts=TRUE)
plot(training$CompressiveStrength,cut2(row(as.matrix(training$FlyAsh))),onlycuts=TRUE)
plot(training$CompressiveStrength,row(as.matrix(training$FlyAsh))
)
plot(training$CompressiveStrength,row(as.matrix(training$Age)))
cut2(training$Age)
cut2(training$FlyAsh)
cut2(training$FlyAsh, onlycuts=TRUE)
cut2(training$Age, onlycuts=TRUE)
qplot(1:dim(training)[1],CompressiveStrength,data=training,colour=cut2(1:dim(training)[1],m=200,g=4))
names(training)
qplot(1:dim(training)[1],CompressiveStrength,data=training,colour=cut2(1:dim(training)[2],m=200,g=4))
qplot(1:dim(training)[1],CompressiveStrength,data=training,colour=)
cut2(1:dim(training)[1],m=200,g=4)
cut2(training$Age,m=200,g=4)
cut2(training$FlyAsh,m=200,g=4)
cutash<-levels(cut2(row(as.matrix(training$FlyAsh))),4)
cutash<-cut2(training$FlyAsh,m=200,g=4)
plot(training$CompressiveStrength,row(as.matrix(training$Age)),color=cutash)
plot(training$CompressiveStrength,row(as.matrix(training$Age)),f=cutash)
plot(training$CompressiveStrength,row(as.matrix(training$Age)),colour=cutash)
training_index = 1:dim(training)[1]
cut = cut2(training$index, g = 10)
qplot(training_index,training$CompressiveStrength,col=cut)
library(slidify)
setwd("../desktop/rwdfolder/ProjectDevDataProd")
author("ProjectSlides")
slidify("index.Rmd")
library('knitr')
browseURL
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish_github("george--v","DevDataProducts")
publish_github("g3ovalle@gmail.com","DevDataProducts")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
